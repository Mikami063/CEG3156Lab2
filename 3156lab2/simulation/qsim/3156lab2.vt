// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2024 13:02:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegsiterFIleTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegsiterFIleTest_vlg_sample_tst(
	clk,
	i_input,
	i_read1addr,
	i_read2addr,
	i_resetBar,
	i_writeaddr,
	s_regwrite,
	sampler_tx
);
input  clk;
input [7:0] i_input;
input [4:0] i_read1addr;
input [4:0] i_read2addr;
input  i_resetBar;
input [4:0] i_writeaddr;
input  s_regwrite;
output sampler_tx;

reg sample;
time current_time;
always @(clk or i_input or i_read1addr or i_read2addr or i_resetBar or i_writeaddr or s_regwrite)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegsiterFIleTest_vlg_check_tst (
	debug_0,
	debug_1,
	debug_2,
	debug_3,
	debug_4,
	debug_5,
	debug_6,
	debug_7,
	o_Read1,
	o_Read2,
	sampler_rx
);
input [7:0] debug_0;
input [7:0] debug_1;
input [7:0] debug_2;
input [7:0] debug_3;
input [7:0] debug_4;
input [7:0] debug_5;
input [7:0] debug_6;
input [7:0] debug_7;
input [7:0] o_Read1;
input [7:0] o_Read2;
input sampler_rx;

reg [7:0] debug_0_expected;
reg [7:0] debug_1_expected;
reg [7:0] debug_2_expected;
reg [7:0] debug_3_expected;
reg [7:0] debug_4_expected;
reg [7:0] debug_5_expected;
reg [7:0] debug_6_expected;
reg [7:0] debug_7_expected;
reg [7:0] o_Read1_expected;
reg [7:0] o_Read2_expected;

reg [7:0] debug_0_prev;
reg [7:0] debug_1_prev;
reg [7:0] debug_2_prev;
reg [7:0] debug_3_prev;
reg [7:0] debug_4_prev;
reg [7:0] debug_5_prev;
reg [7:0] debug_6_prev;
reg [7:0] debug_7_prev;
reg [7:0] o_Read1_prev;
reg [7:0] o_Read2_prev;

reg [7:0] debug_0_expected_prev;
reg [7:0] debug_1_expected_prev;
reg [7:0] debug_2_expected_prev;
reg [7:0] debug_3_expected_prev;
reg [7:0] debug_4_expected_prev;
reg [7:0] debug_5_expected_prev;
reg [7:0] debug_6_expected_prev;
reg [7:0] debug_7_expected_prev;
reg [7:0] o_Read1_expected_prev;
reg [7:0] o_Read2_expected_prev;

reg [7:0] last_debug_0_exp;
reg [7:0] last_debug_1_exp;
reg [7:0] last_debug_2_exp;
reg [7:0] last_debug_3_exp;
reg [7:0] last_debug_4_exp;
reg [7:0] last_debug_5_exp;
reg [7:0] last_debug_6_exp;
reg [7:0] last_debug_7_exp;
reg [7:0] last_o_Read1_exp;
reg [7:0] last_o_Read2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug_0_prev = debug_0;
	debug_1_prev = debug_1;
	debug_2_prev = debug_2;
	debug_3_prev = debug_3;
	debug_4_prev = debug_4;
	debug_5_prev = debug_5;
	debug_6_prev = debug_6;
	debug_7_prev = debug_7;
	o_Read1_prev = o_Read1;
	o_Read2_prev = o_Read2;
end

// update expected /o prevs

always @(trigger)
begin
	debug_0_expected_prev = debug_0_expected;
	debug_1_expected_prev = debug_1_expected;
	debug_2_expected_prev = debug_2_expected;
	debug_3_expected_prev = debug_3_expected;
	debug_4_expected_prev = debug_4_expected;
	debug_5_expected_prev = debug_5_expected;
	debug_6_expected_prev = debug_6_expected;
	debug_7_expected_prev = debug_7_expected;
	o_Read1_expected_prev = o_Read1_expected;
	o_Read2_expected_prev = o_Read2_expected;
end


// expected o_Read1[ 7 ]
initial
begin
	o_Read1_expected[7] = 1'bX;
end 
// expected o_Read1[ 6 ]
initial
begin
	o_Read1_expected[6] = 1'bX;
end 
// expected o_Read1[ 5 ]
initial
begin
	o_Read1_expected[5] = 1'bX;
end 
// expected o_Read1[ 4 ]
initial
begin
	o_Read1_expected[4] = 1'bX;
end 
// expected o_Read1[ 3 ]
initial
begin
	o_Read1_expected[3] = 1'bX;
end 
// expected o_Read1[ 2 ]
initial
begin
	o_Read1_expected[2] = 1'bX;
end 
// expected o_Read1[ 1 ]
initial
begin
	o_Read1_expected[1] = 1'bX;
end 
// expected o_Read1[ 0 ]
initial
begin
	o_Read1_expected[0] = 1'bX;
end 
// expected o_Read2[ 7 ]
initial
begin
	o_Read2_expected[7] = 1'bX;
end 
// expected o_Read2[ 6 ]
initial
begin
	o_Read2_expected[6] = 1'bX;
end 
// expected o_Read2[ 5 ]
initial
begin
	o_Read2_expected[5] = 1'bX;
end 
// expected o_Read2[ 4 ]
initial
begin
	o_Read2_expected[4] = 1'bX;
end 
// expected o_Read2[ 3 ]
initial
begin
	o_Read2_expected[3] = 1'bX;
end 
// expected o_Read2[ 2 ]
initial
begin
	o_Read2_expected[2] = 1'bX;
end 
// expected o_Read2[ 1 ]
initial
begin
	o_Read2_expected[1] = 1'bX;
end 
// expected o_Read2[ 0 ]
initial
begin
	o_Read2_expected[0] = 1'bX;
end 
// expected debug_0[ 7 ]
initial
begin
	debug_0_expected[7] = 1'bX;
end 
// expected debug_0[ 6 ]
initial
begin
	debug_0_expected[6] = 1'bX;
end 
// expected debug_0[ 5 ]
initial
begin
	debug_0_expected[5] = 1'bX;
end 
// expected debug_0[ 4 ]
initial
begin
	debug_0_expected[4] = 1'bX;
end 
// expected debug_0[ 3 ]
initial
begin
	debug_0_expected[3] = 1'bX;
end 
// expected debug_0[ 2 ]
initial
begin
	debug_0_expected[2] = 1'bX;
end 
// expected debug_0[ 1 ]
initial
begin
	debug_0_expected[1] = 1'bX;
end 
// expected debug_0[ 0 ]
initial
begin
	debug_0_expected[0] = 1'bX;
end 
// expected debug_1[ 7 ]
initial
begin
	debug_1_expected[7] = 1'bX;
end 
// expected debug_1[ 6 ]
initial
begin
	debug_1_expected[6] = 1'bX;
end 
// expected debug_1[ 5 ]
initial
begin
	debug_1_expected[5] = 1'bX;
end 
// expected debug_1[ 4 ]
initial
begin
	debug_1_expected[4] = 1'bX;
end 
// expected debug_1[ 3 ]
initial
begin
	debug_1_expected[3] = 1'bX;
end 
// expected debug_1[ 2 ]
initial
begin
	debug_1_expected[2] = 1'bX;
end 
// expected debug_1[ 1 ]
initial
begin
	debug_1_expected[1] = 1'bX;
end 
// expected debug_1[ 0 ]
initial
begin
	debug_1_expected[0] = 1'bX;
end 
// expected debug_2[ 7 ]
initial
begin
	debug_2_expected[7] = 1'bX;
end 
// expected debug_2[ 6 ]
initial
begin
	debug_2_expected[6] = 1'bX;
end 
// expected debug_2[ 5 ]
initial
begin
	debug_2_expected[5] = 1'bX;
end 
// expected debug_2[ 4 ]
initial
begin
	debug_2_expected[4] = 1'bX;
end 
// expected debug_2[ 3 ]
initial
begin
	debug_2_expected[3] = 1'bX;
end 
// expected debug_2[ 2 ]
initial
begin
	debug_2_expected[2] = 1'bX;
end 
// expected debug_2[ 1 ]
initial
begin
	debug_2_expected[1] = 1'bX;
end 
// expected debug_2[ 0 ]
initial
begin
	debug_2_expected[0] = 1'bX;
end 
// expected debug_3[ 7 ]
initial
begin
	debug_3_expected[7] = 1'bX;
end 
// expected debug_3[ 6 ]
initial
begin
	debug_3_expected[6] = 1'bX;
end 
// expected debug_3[ 5 ]
initial
begin
	debug_3_expected[5] = 1'bX;
end 
// expected debug_3[ 4 ]
initial
begin
	debug_3_expected[4] = 1'bX;
end 
// expected debug_3[ 3 ]
initial
begin
	debug_3_expected[3] = 1'bX;
end 
// expected debug_3[ 2 ]
initial
begin
	debug_3_expected[2] = 1'bX;
end 
// expected debug_3[ 1 ]
initial
begin
	debug_3_expected[1] = 1'bX;
end 
// expected debug_3[ 0 ]
initial
begin
	debug_3_expected[0] = 1'bX;
end 
// expected debug_4[ 7 ]
initial
begin
	debug_4_expected[7] = 1'bX;
end 
// expected debug_4[ 6 ]
initial
begin
	debug_4_expected[6] = 1'bX;
end 
// expected debug_4[ 5 ]
initial
begin
	debug_4_expected[5] = 1'bX;
end 
// expected debug_4[ 4 ]
initial
begin
	debug_4_expected[4] = 1'bX;
end 
// expected debug_4[ 3 ]
initial
begin
	debug_4_expected[3] = 1'bX;
end 
// expected debug_4[ 2 ]
initial
begin
	debug_4_expected[2] = 1'bX;
end 
// expected debug_4[ 1 ]
initial
begin
	debug_4_expected[1] = 1'bX;
end 
// expected debug_4[ 0 ]
initial
begin
	debug_4_expected[0] = 1'bX;
end 
// expected debug_5[ 7 ]
initial
begin
	debug_5_expected[7] = 1'bX;
end 
// expected debug_5[ 6 ]
initial
begin
	debug_5_expected[6] = 1'bX;
end 
// expected debug_5[ 5 ]
initial
begin
	debug_5_expected[5] = 1'bX;
end 
// expected debug_5[ 4 ]
initial
begin
	debug_5_expected[4] = 1'bX;
end 
// expected debug_5[ 3 ]
initial
begin
	debug_5_expected[3] = 1'bX;
end 
// expected debug_5[ 2 ]
initial
begin
	debug_5_expected[2] = 1'bX;
end 
// expected debug_5[ 1 ]
initial
begin
	debug_5_expected[1] = 1'bX;
end 
// expected debug_5[ 0 ]
initial
begin
	debug_5_expected[0] = 1'bX;
end 
// expected debug_6[ 7 ]
initial
begin
	debug_6_expected[7] = 1'bX;
end 
// expected debug_6[ 6 ]
initial
begin
	debug_6_expected[6] = 1'bX;
end 
// expected debug_6[ 5 ]
initial
begin
	debug_6_expected[5] = 1'bX;
end 
// expected debug_6[ 4 ]
initial
begin
	debug_6_expected[4] = 1'bX;
end 
// expected debug_6[ 3 ]
initial
begin
	debug_6_expected[3] = 1'bX;
end 
// expected debug_6[ 2 ]
initial
begin
	debug_6_expected[2] = 1'bX;
end 
// expected debug_6[ 1 ]
initial
begin
	debug_6_expected[1] = 1'bX;
end 
// expected debug_6[ 0 ]
initial
begin
	debug_6_expected[0] = 1'bX;
end 
// expected debug_7[ 7 ]
initial
begin
	debug_7_expected[7] = 1'bX;
end 
// expected debug_7[ 6 ]
initial
begin
	debug_7_expected[6] = 1'bX;
end 
// expected debug_7[ 5 ]
initial
begin
	debug_7_expected[5] = 1'bX;
end 
// expected debug_7[ 4 ]
initial
begin
	debug_7_expected[4] = 1'bX;
end 
// expected debug_7[ 3 ]
initial
begin
	debug_7_expected[3] = 1'bX;
end 
// expected debug_7[ 2 ]
initial
begin
	debug_7_expected[2] = 1'bX;
end 
// expected debug_7[ 1 ]
initial
begin
	debug_7_expected[1] = 1'bX;
end 
// expected debug_7[ 0 ]
initial
begin
	debug_7_expected[0] = 1'bX;
end 
// generate trigger
always @(debug_0_expected or debug_0 or debug_1_expected or debug_1 or debug_2_expected or debug_2 or debug_3_expected or debug_3 or debug_4_expected or debug_4 or debug_5_expected or debug_5 or debug_6_expected or debug_6 or debug_7_expected or debug_7 or o_Read1_expected or o_Read1 or o_Read2_expected or o_Read2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug_0 = %b | expected debug_1 = %b | expected debug_2 = %b | expected debug_3 = %b | expected debug_4 = %b | expected debug_5 = %b | expected debug_6 = %b | expected debug_7 = %b | expected o_Read1 = %b | expected o_Read2 = %b | ",debug_0_expected_prev,debug_1_expected_prev,debug_2_expected_prev,debug_3_expected_prev,debug_4_expected_prev,debug_5_expected_prev,debug_6_expected_prev,debug_7_expected_prev,o_Read1_expected_prev,o_Read2_expected_prev);
	$display("| real debug_0 = %b | real debug_1 = %b | real debug_2 = %b | real debug_3 = %b | real debug_4 = %b | real debug_5 = %b | real debug_6 = %b | real debug_7 = %b | real o_Read1 = %b | real o_Read2 = %b | ",debug_0_prev,debug_1_prev,debug_2_prev,debug_3_prev,debug_4_prev,debug_5_prev,debug_6_prev,debug_7_prev,o_Read1_prev,o_Read2_prev);
`endif
	if (
		( debug_0_expected_prev[0] !== 1'bx ) && ( debug_0_prev[0] !== debug_0_expected_prev[0] )
		&& ((debug_0_expected_prev[0] !== last_debug_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[0] = debug_0_expected_prev[0];
	end
	if (
		( debug_0_expected_prev[1] !== 1'bx ) && ( debug_0_prev[1] !== debug_0_expected_prev[1] )
		&& ((debug_0_expected_prev[1] !== last_debug_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[1] = debug_0_expected_prev[1];
	end
	if (
		( debug_0_expected_prev[2] !== 1'bx ) && ( debug_0_prev[2] !== debug_0_expected_prev[2] )
		&& ((debug_0_expected_prev[2] !== last_debug_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[2] = debug_0_expected_prev[2];
	end
	if (
		( debug_0_expected_prev[3] !== 1'bx ) && ( debug_0_prev[3] !== debug_0_expected_prev[3] )
		&& ((debug_0_expected_prev[3] !== last_debug_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[3] = debug_0_expected_prev[3];
	end
	if (
		( debug_0_expected_prev[4] !== 1'bx ) && ( debug_0_prev[4] !== debug_0_expected_prev[4] )
		&& ((debug_0_expected_prev[4] !== last_debug_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[4] = debug_0_expected_prev[4];
	end
	if (
		( debug_0_expected_prev[5] !== 1'bx ) && ( debug_0_prev[5] !== debug_0_expected_prev[5] )
		&& ((debug_0_expected_prev[5] !== last_debug_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[5] = debug_0_expected_prev[5];
	end
	if (
		( debug_0_expected_prev[6] !== 1'bx ) && ( debug_0_prev[6] !== debug_0_expected_prev[6] )
		&& ((debug_0_expected_prev[6] !== last_debug_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[6] = debug_0_expected_prev[6];
	end
	if (
		( debug_0_expected_prev[7] !== 1'bx ) && ( debug_0_prev[7] !== debug_0_expected_prev[7] )
		&& ((debug_0_expected_prev[7] !== last_debug_0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_0_expected_prev);
		$display ("     Real value = %b", debug_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_0_exp[7] = debug_0_expected_prev[7];
	end
	if (
		( debug_1_expected_prev[0] !== 1'bx ) && ( debug_1_prev[0] !== debug_1_expected_prev[0] )
		&& ((debug_1_expected_prev[0] !== last_debug_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[0] = debug_1_expected_prev[0];
	end
	if (
		( debug_1_expected_prev[1] !== 1'bx ) && ( debug_1_prev[1] !== debug_1_expected_prev[1] )
		&& ((debug_1_expected_prev[1] !== last_debug_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[1] = debug_1_expected_prev[1];
	end
	if (
		( debug_1_expected_prev[2] !== 1'bx ) && ( debug_1_prev[2] !== debug_1_expected_prev[2] )
		&& ((debug_1_expected_prev[2] !== last_debug_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[2] = debug_1_expected_prev[2];
	end
	if (
		( debug_1_expected_prev[3] !== 1'bx ) && ( debug_1_prev[3] !== debug_1_expected_prev[3] )
		&& ((debug_1_expected_prev[3] !== last_debug_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[3] = debug_1_expected_prev[3];
	end
	if (
		( debug_1_expected_prev[4] !== 1'bx ) && ( debug_1_prev[4] !== debug_1_expected_prev[4] )
		&& ((debug_1_expected_prev[4] !== last_debug_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[4] = debug_1_expected_prev[4];
	end
	if (
		( debug_1_expected_prev[5] !== 1'bx ) && ( debug_1_prev[5] !== debug_1_expected_prev[5] )
		&& ((debug_1_expected_prev[5] !== last_debug_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[5] = debug_1_expected_prev[5];
	end
	if (
		( debug_1_expected_prev[6] !== 1'bx ) && ( debug_1_prev[6] !== debug_1_expected_prev[6] )
		&& ((debug_1_expected_prev[6] !== last_debug_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[6] = debug_1_expected_prev[6];
	end
	if (
		( debug_1_expected_prev[7] !== 1'bx ) && ( debug_1_prev[7] !== debug_1_expected_prev[7] )
		&& ((debug_1_expected_prev[7] !== last_debug_1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_1_expected_prev);
		$display ("     Real value = %b", debug_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_1_exp[7] = debug_1_expected_prev[7];
	end
	if (
		( debug_2_expected_prev[0] !== 1'bx ) && ( debug_2_prev[0] !== debug_2_expected_prev[0] )
		&& ((debug_2_expected_prev[0] !== last_debug_2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[0] = debug_2_expected_prev[0];
	end
	if (
		( debug_2_expected_prev[1] !== 1'bx ) && ( debug_2_prev[1] !== debug_2_expected_prev[1] )
		&& ((debug_2_expected_prev[1] !== last_debug_2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[1] = debug_2_expected_prev[1];
	end
	if (
		( debug_2_expected_prev[2] !== 1'bx ) && ( debug_2_prev[2] !== debug_2_expected_prev[2] )
		&& ((debug_2_expected_prev[2] !== last_debug_2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[2] = debug_2_expected_prev[2];
	end
	if (
		( debug_2_expected_prev[3] !== 1'bx ) && ( debug_2_prev[3] !== debug_2_expected_prev[3] )
		&& ((debug_2_expected_prev[3] !== last_debug_2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[3] = debug_2_expected_prev[3];
	end
	if (
		( debug_2_expected_prev[4] !== 1'bx ) && ( debug_2_prev[4] !== debug_2_expected_prev[4] )
		&& ((debug_2_expected_prev[4] !== last_debug_2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[4] = debug_2_expected_prev[4];
	end
	if (
		( debug_2_expected_prev[5] !== 1'bx ) && ( debug_2_prev[5] !== debug_2_expected_prev[5] )
		&& ((debug_2_expected_prev[5] !== last_debug_2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[5] = debug_2_expected_prev[5];
	end
	if (
		( debug_2_expected_prev[6] !== 1'bx ) && ( debug_2_prev[6] !== debug_2_expected_prev[6] )
		&& ((debug_2_expected_prev[6] !== last_debug_2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[6] = debug_2_expected_prev[6];
	end
	if (
		( debug_2_expected_prev[7] !== 1'bx ) && ( debug_2_prev[7] !== debug_2_expected_prev[7] )
		&& ((debug_2_expected_prev[7] !== last_debug_2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_2_expected_prev);
		$display ("     Real value = %b", debug_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_2_exp[7] = debug_2_expected_prev[7];
	end
	if (
		( debug_3_expected_prev[0] !== 1'bx ) && ( debug_3_prev[0] !== debug_3_expected_prev[0] )
		&& ((debug_3_expected_prev[0] !== last_debug_3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[0] = debug_3_expected_prev[0];
	end
	if (
		( debug_3_expected_prev[1] !== 1'bx ) && ( debug_3_prev[1] !== debug_3_expected_prev[1] )
		&& ((debug_3_expected_prev[1] !== last_debug_3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[1] = debug_3_expected_prev[1];
	end
	if (
		( debug_3_expected_prev[2] !== 1'bx ) && ( debug_3_prev[2] !== debug_3_expected_prev[2] )
		&& ((debug_3_expected_prev[2] !== last_debug_3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[2] = debug_3_expected_prev[2];
	end
	if (
		( debug_3_expected_prev[3] !== 1'bx ) && ( debug_3_prev[3] !== debug_3_expected_prev[3] )
		&& ((debug_3_expected_prev[3] !== last_debug_3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[3] = debug_3_expected_prev[3];
	end
	if (
		( debug_3_expected_prev[4] !== 1'bx ) && ( debug_3_prev[4] !== debug_3_expected_prev[4] )
		&& ((debug_3_expected_prev[4] !== last_debug_3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[4] = debug_3_expected_prev[4];
	end
	if (
		( debug_3_expected_prev[5] !== 1'bx ) && ( debug_3_prev[5] !== debug_3_expected_prev[5] )
		&& ((debug_3_expected_prev[5] !== last_debug_3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[5] = debug_3_expected_prev[5];
	end
	if (
		( debug_3_expected_prev[6] !== 1'bx ) && ( debug_3_prev[6] !== debug_3_expected_prev[6] )
		&& ((debug_3_expected_prev[6] !== last_debug_3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[6] = debug_3_expected_prev[6];
	end
	if (
		( debug_3_expected_prev[7] !== 1'bx ) && ( debug_3_prev[7] !== debug_3_expected_prev[7] )
		&& ((debug_3_expected_prev[7] !== last_debug_3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_3_expected_prev);
		$display ("     Real value = %b", debug_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_3_exp[7] = debug_3_expected_prev[7];
	end
	if (
		( debug_4_expected_prev[0] !== 1'bx ) && ( debug_4_prev[0] !== debug_4_expected_prev[0] )
		&& ((debug_4_expected_prev[0] !== last_debug_4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[0] = debug_4_expected_prev[0];
	end
	if (
		( debug_4_expected_prev[1] !== 1'bx ) && ( debug_4_prev[1] !== debug_4_expected_prev[1] )
		&& ((debug_4_expected_prev[1] !== last_debug_4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[1] = debug_4_expected_prev[1];
	end
	if (
		( debug_4_expected_prev[2] !== 1'bx ) && ( debug_4_prev[2] !== debug_4_expected_prev[2] )
		&& ((debug_4_expected_prev[2] !== last_debug_4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[2] = debug_4_expected_prev[2];
	end
	if (
		( debug_4_expected_prev[3] !== 1'bx ) && ( debug_4_prev[3] !== debug_4_expected_prev[3] )
		&& ((debug_4_expected_prev[3] !== last_debug_4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[3] = debug_4_expected_prev[3];
	end
	if (
		( debug_4_expected_prev[4] !== 1'bx ) && ( debug_4_prev[4] !== debug_4_expected_prev[4] )
		&& ((debug_4_expected_prev[4] !== last_debug_4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[4] = debug_4_expected_prev[4];
	end
	if (
		( debug_4_expected_prev[5] !== 1'bx ) && ( debug_4_prev[5] !== debug_4_expected_prev[5] )
		&& ((debug_4_expected_prev[5] !== last_debug_4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[5] = debug_4_expected_prev[5];
	end
	if (
		( debug_4_expected_prev[6] !== 1'bx ) && ( debug_4_prev[6] !== debug_4_expected_prev[6] )
		&& ((debug_4_expected_prev[6] !== last_debug_4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[6] = debug_4_expected_prev[6];
	end
	if (
		( debug_4_expected_prev[7] !== 1'bx ) && ( debug_4_prev[7] !== debug_4_expected_prev[7] )
		&& ((debug_4_expected_prev[7] !== last_debug_4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_4_expected_prev);
		$display ("     Real value = %b", debug_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_4_exp[7] = debug_4_expected_prev[7];
	end
	if (
		( debug_5_expected_prev[0] !== 1'bx ) && ( debug_5_prev[0] !== debug_5_expected_prev[0] )
		&& ((debug_5_expected_prev[0] !== last_debug_5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[0] = debug_5_expected_prev[0];
	end
	if (
		( debug_5_expected_prev[1] !== 1'bx ) && ( debug_5_prev[1] !== debug_5_expected_prev[1] )
		&& ((debug_5_expected_prev[1] !== last_debug_5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[1] = debug_5_expected_prev[1];
	end
	if (
		( debug_5_expected_prev[2] !== 1'bx ) && ( debug_5_prev[2] !== debug_5_expected_prev[2] )
		&& ((debug_5_expected_prev[2] !== last_debug_5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[2] = debug_5_expected_prev[2];
	end
	if (
		( debug_5_expected_prev[3] !== 1'bx ) && ( debug_5_prev[3] !== debug_5_expected_prev[3] )
		&& ((debug_5_expected_prev[3] !== last_debug_5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[3] = debug_5_expected_prev[3];
	end
	if (
		( debug_5_expected_prev[4] !== 1'bx ) && ( debug_5_prev[4] !== debug_5_expected_prev[4] )
		&& ((debug_5_expected_prev[4] !== last_debug_5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[4] = debug_5_expected_prev[4];
	end
	if (
		( debug_5_expected_prev[5] !== 1'bx ) && ( debug_5_prev[5] !== debug_5_expected_prev[5] )
		&& ((debug_5_expected_prev[5] !== last_debug_5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[5] = debug_5_expected_prev[5];
	end
	if (
		( debug_5_expected_prev[6] !== 1'bx ) && ( debug_5_prev[6] !== debug_5_expected_prev[6] )
		&& ((debug_5_expected_prev[6] !== last_debug_5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[6] = debug_5_expected_prev[6];
	end
	if (
		( debug_5_expected_prev[7] !== 1'bx ) && ( debug_5_prev[7] !== debug_5_expected_prev[7] )
		&& ((debug_5_expected_prev[7] !== last_debug_5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_5_expected_prev);
		$display ("     Real value = %b", debug_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_debug_5_exp[7] = debug_5_expected_prev[7];
	end
	if (
		( debug_6_expected_prev[0] !== 1'bx ) && ( debug_6_prev[0] !== debug_6_expected_prev[0] )
		&& ((debug_6_expected_prev[0] !== last_debug_6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[0] = debug_6_expected_prev[0];
	end
	if (
		( debug_6_expected_prev[1] !== 1'bx ) && ( debug_6_prev[1] !== debug_6_expected_prev[1] )
		&& ((debug_6_expected_prev[1] !== last_debug_6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[1] = debug_6_expected_prev[1];
	end
	if (
		( debug_6_expected_prev[2] !== 1'bx ) && ( debug_6_prev[2] !== debug_6_expected_prev[2] )
		&& ((debug_6_expected_prev[2] !== last_debug_6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[2] = debug_6_expected_prev[2];
	end
	if (
		( debug_6_expected_prev[3] !== 1'bx ) && ( debug_6_prev[3] !== debug_6_expected_prev[3] )
		&& ((debug_6_expected_prev[3] !== last_debug_6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[3] = debug_6_expected_prev[3];
	end
	if (
		( debug_6_expected_prev[4] !== 1'bx ) && ( debug_6_prev[4] !== debug_6_expected_prev[4] )
		&& ((debug_6_expected_prev[4] !== last_debug_6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[4] = debug_6_expected_prev[4];
	end
	if (
		( debug_6_expected_prev[5] !== 1'bx ) && ( debug_6_prev[5] !== debug_6_expected_prev[5] )
		&& ((debug_6_expected_prev[5] !== last_debug_6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[5] = debug_6_expected_prev[5];
	end
	if (
		( debug_6_expected_prev[6] !== 1'bx ) && ( debug_6_prev[6] !== debug_6_expected_prev[6] )
		&& ((debug_6_expected_prev[6] !== last_debug_6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[6] = debug_6_expected_prev[6];
	end
	if (
		( debug_6_expected_prev[7] !== 1'bx ) && ( debug_6_prev[7] !== debug_6_expected_prev[7] )
		&& ((debug_6_expected_prev[7] !== last_debug_6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_6_expected_prev);
		$display ("     Real value = %b", debug_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_debug_6_exp[7] = debug_6_expected_prev[7];
	end
	if (
		( debug_7_expected_prev[0] !== 1'bx ) && ( debug_7_prev[0] !== debug_7_expected_prev[0] )
		&& ((debug_7_expected_prev[0] !== last_debug_7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[0] = debug_7_expected_prev[0];
	end
	if (
		( debug_7_expected_prev[1] !== 1'bx ) && ( debug_7_prev[1] !== debug_7_expected_prev[1] )
		&& ((debug_7_expected_prev[1] !== last_debug_7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[1] = debug_7_expected_prev[1];
	end
	if (
		( debug_7_expected_prev[2] !== 1'bx ) && ( debug_7_prev[2] !== debug_7_expected_prev[2] )
		&& ((debug_7_expected_prev[2] !== last_debug_7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[2] = debug_7_expected_prev[2];
	end
	if (
		( debug_7_expected_prev[3] !== 1'bx ) && ( debug_7_prev[3] !== debug_7_expected_prev[3] )
		&& ((debug_7_expected_prev[3] !== last_debug_7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[3] = debug_7_expected_prev[3];
	end
	if (
		( debug_7_expected_prev[4] !== 1'bx ) && ( debug_7_prev[4] !== debug_7_expected_prev[4] )
		&& ((debug_7_expected_prev[4] !== last_debug_7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[4] = debug_7_expected_prev[4];
	end
	if (
		( debug_7_expected_prev[5] !== 1'bx ) && ( debug_7_prev[5] !== debug_7_expected_prev[5] )
		&& ((debug_7_expected_prev[5] !== last_debug_7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[5] = debug_7_expected_prev[5];
	end
	if (
		( debug_7_expected_prev[6] !== 1'bx ) && ( debug_7_prev[6] !== debug_7_expected_prev[6] )
		&& ((debug_7_expected_prev[6] !== last_debug_7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[6] = debug_7_expected_prev[6];
	end
	if (
		( debug_7_expected_prev[7] !== 1'bx ) && ( debug_7_prev[7] !== debug_7_expected_prev[7] )
		&& ((debug_7_expected_prev[7] !== last_debug_7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_7_expected_prev);
		$display ("     Real value = %b", debug_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_debug_7_exp[7] = debug_7_expected_prev[7];
	end
	if (
		( o_Read1_expected_prev[0] !== 1'bx ) && ( o_Read1_prev[0] !== o_Read1_expected_prev[0] )
		&& ((o_Read1_expected_prev[0] !== last_o_Read1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[0] = o_Read1_expected_prev[0];
	end
	if (
		( o_Read1_expected_prev[1] !== 1'bx ) && ( o_Read1_prev[1] !== o_Read1_expected_prev[1] )
		&& ((o_Read1_expected_prev[1] !== last_o_Read1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[1] = o_Read1_expected_prev[1];
	end
	if (
		( o_Read1_expected_prev[2] !== 1'bx ) && ( o_Read1_prev[2] !== o_Read1_expected_prev[2] )
		&& ((o_Read1_expected_prev[2] !== last_o_Read1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[2] = o_Read1_expected_prev[2];
	end
	if (
		( o_Read1_expected_prev[3] !== 1'bx ) && ( o_Read1_prev[3] !== o_Read1_expected_prev[3] )
		&& ((o_Read1_expected_prev[3] !== last_o_Read1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[3] = o_Read1_expected_prev[3];
	end
	if (
		( o_Read1_expected_prev[4] !== 1'bx ) && ( o_Read1_prev[4] !== o_Read1_expected_prev[4] )
		&& ((o_Read1_expected_prev[4] !== last_o_Read1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[4] = o_Read1_expected_prev[4];
	end
	if (
		( o_Read1_expected_prev[5] !== 1'bx ) && ( o_Read1_prev[5] !== o_Read1_expected_prev[5] )
		&& ((o_Read1_expected_prev[5] !== last_o_Read1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[5] = o_Read1_expected_prev[5];
	end
	if (
		( o_Read1_expected_prev[6] !== 1'bx ) && ( o_Read1_prev[6] !== o_Read1_expected_prev[6] )
		&& ((o_Read1_expected_prev[6] !== last_o_Read1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[6] = o_Read1_expected_prev[6];
	end
	if (
		( o_Read1_expected_prev[7] !== 1'bx ) && ( o_Read1_prev[7] !== o_Read1_expected_prev[7] )
		&& ((o_Read1_expected_prev[7] !== last_o_Read1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read1_expected_prev);
		$display ("     Real value = %b", o_Read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_Read1_exp[7] = o_Read1_expected_prev[7];
	end
	if (
		( o_Read2_expected_prev[0] !== 1'bx ) && ( o_Read2_prev[0] !== o_Read2_expected_prev[0] )
		&& ((o_Read2_expected_prev[0] !== last_o_Read2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[0] = o_Read2_expected_prev[0];
	end
	if (
		( o_Read2_expected_prev[1] !== 1'bx ) && ( o_Read2_prev[1] !== o_Read2_expected_prev[1] )
		&& ((o_Read2_expected_prev[1] !== last_o_Read2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[1] = o_Read2_expected_prev[1];
	end
	if (
		( o_Read2_expected_prev[2] !== 1'bx ) && ( o_Read2_prev[2] !== o_Read2_expected_prev[2] )
		&& ((o_Read2_expected_prev[2] !== last_o_Read2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[2] = o_Read2_expected_prev[2];
	end
	if (
		( o_Read2_expected_prev[3] !== 1'bx ) && ( o_Read2_prev[3] !== o_Read2_expected_prev[3] )
		&& ((o_Read2_expected_prev[3] !== last_o_Read2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[3] = o_Read2_expected_prev[3];
	end
	if (
		( o_Read2_expected_prev[4] !== 1'bx ) && ( o_Read2_prev[4] !== o_Read2_expected_prev[4] )
		&& ((o_Read2_expected_prev[4] !== last_o_Read2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[4] = o_Read2_expected_prev[4];
	end
	if (
		( o_Read2_expected_prev[5] !== 1'bx ) && ( o_Read2_prev[5] !== o_Read2_expected_prev[5] )
		&& ((o_Read2_expected_prev[5] !== last_o_Read2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[5] = o_Read2_expected_prev[5];
	end
	if (
		( o_Read2_expected_prev[6] !== 1'bx ) && ( o_Read2_prev[6] !== o_Read2_expected_prev[6] )
		&& ((o_Read2_expected_prev[6] !== last_o_Read2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[6] = o_Read2_expected_prev[6];
	end
	if (
		( o_Read2_expected_prev[7] !== 1'bx ) && ( o_Read2_prev[7] !== o_Read2_expected_prev[7] )
		&& ((o_Read2_expected_prev[7] !== last_o_Read2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Read2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Read2_expected_prev);
		$display ("     Real value = %b", o_Read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_Read2_exp[7] = o_Read2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegsiterFIleTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] i_input;
reg [4:0] i_read1addr;
reg [4:0] i_read2addr;
reg i_resetBar;
reg [4:0] i_writeaddr;
reg s_regwrite;
// wires                                               
wire [7:0] debug_0;
wire [7:0] debug_1;
wire [7:0] debug_2;
wire [7:0] debug_3;
wire [7:0] debug_4;
wire [7:0] debug_5;
wire [7:0] debug_6;
wire [7:0] debug_7;
wire [7:0] o_Read1;
wire [7:0] o_Read2;

wire sampler;                             

// assign statements (if any)                          
RegsiterFIleTest i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.debug_0(debug_0),
	.debug_1(debug_1),
	.debug_2(debug_2),
	.debug_3(debug_3),
	.debug_4(debug_4),
	.debug_5(debug_5),
	.debug_6(debug_6),
	.debug_7(debug_7),
	.i_input(i_input),
	.i_read1addr(i_read1addr),
	.i_read2addr(i_read2addr),
	.i_resetBar(i_resetBar),
	.i_writeaddr(i_writeaddr),
	.o_Read1(o_Read1),
	.o_Read2(o_Read2),
	.s_regwrite(s_regwrite)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// i_input[ 7 ]
initial
begin
	i_input[7] = 1'b0;
end 
// i_input[ 6 ]
initial
begin
	i_input[6] = 1'b0;
end 
// i_input[ 5 ]
initial
begin
	i_input[5] = 1'b0;
end 
// i_input[ 4 ]
initial
begin
	i_input[4] = 1'b0;
end 
// i_input[ 3 ]
initial
begin
	i_input[3] = 1'b0;
end 
// i_input[ 2 ]
initial
begin
	i_input[2] = 1'b1;
	i_input[2] = #100000 1'b0;
	i_input[2] = #60000 1'b1;
end 
// i_input[ 1 ]
initial
begin
	i_input[1] = 1'b1;
end 
// i_input[ 0 ]
initial
begin
	i_input[0] = 1'b1;
end 
// i_read1addr[ 4 ]
initial
begin
	i_read1addr[4] = 1'b0;
end 
// i_read1addr[ 3 ]
initial
begin
	i_read1addr[3] = 1'b0;
end 
// i_read1addr[ 2 ]
initial
begin
	i_read1addr[2] = 1'b0;
end 
// i_read1addr[ 1 ]
initial
begin
	i_read1addr[1] = 1'b0;
end 
// i_read1addr[ 0 ]
initial
begin
	i_read1addr[0] = 1'b0;
	i_read1addr[0] = #80000 1'b1;
	i_read1addr[0] = #160000 1'b0;
end 
// i_read2addr[ 4 ]
initial
begin
	i_read2addr[4] = 1'b0;
end 
// i_read2addr[ 3 ]
initial
begin
	i_read2addr[3] = 1'b0;
end 
// i_read2addr[ 2 ]
initial
begin
	i_read2addr[2] = 1'b0;
end 
// i_read2addr[ 1 ]
initial
begin
	i_read2addr[1] = 1'b0;
	i_read2addr[1] = #80000 1'b1;
	i_read2addr[1] = #160000 1'b0;
end 
// i_read2addr[ 0 ]
initial
begin
	i_read2addr[0] = 1'b0;
end 

// i_resetBar
initial
begin
	i_resetBar = 1'b1;
end 
// i_writeaddr[ 4 ]
initial
begin
	i_writeaddr[4] = 1'b0;
end 
// i_writeaddr[ 3 ]
initial
begin
	i_writeaddr[3] = 1'b0;
end 
// i_writeaddr[ 2 ]
initial
begin
	i_writeaddr[2] = 1'b0;
end 
// i_writeaddr[ 1 ]
initial
begin
	i_writeaddr[1] = 1'b0;
	i_writeaddr[1] = #80000 1'b1;
	i_writeaddr[1] = #60000 1'b0;
end 
// i_writeaddr[ 0 ]
initial
begin
	i_writeaddr[0] = 1'b0;
	i_writeaddr[0] = #20000 1'b1;
	i_writeaddr[0] = #60000 1'b0;
end 

// s_regwrite
initial
begin
	s_regwrite = 1'b1;
	s_regwrite = #160000 1'b0;
end 

RegsiterFIleTest_vlg_sample_tst tb_sample (
	.clk(clk),
	.i_input(i_input),
	.i_read1addr(i_read1addr),
	.i_read2addr(i_read2addr),
	.i_resetBar(i_resetBar),
	.i_writeaddr(i_writeaddr),
	.s_regwrite(s_regwrite),
	.sampler_tx(sampler)
);

RegsiterFIleTest_vlg_check_tst tb_out(
	.debug_0(debug_0),
	.debug_1(debug_1),
	.debug_2(debug_2),
	.debug_3(debug_3),
	.debug_4(debug_4),
	.debug_5(debug_5),
	.debug_6(debug_6),
	.debug_7(debug_7),
	.o_Read1(o_Read1),
	.o_Read2(o_Read2),
	.sampler_rx(sampler)
);
endmodule

